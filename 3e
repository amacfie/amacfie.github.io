<!DOCTYPE html>
<html>
  <head>
    <title>Distributed Bayesian inference with PASS-GLM</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <style type="text/css">
      /* Slideshow styles */
      /* https://github.com/gnab/remark/issues/236#issuecomment-473603654 */
      .cols {
        display: flex;
      }
      .fifty {
        flex: 50%;
      }
    </style>
  </head>
  <body>
    <textarea id="source">








class: center

<!--
  https://github.com/gnab/remark/wiki/Markdown
-->

# Distributed Bayesian inference with PASS-GLM

<br />
<br />

Jonathan Huggins, Ryan Adams, and Tamara Broderick (2017).
["PASS-GLM: polynomial approximate sufficient statistics for scalable Bayesian
GLM inference."](https://arxiv.org/pdf/1709.09216.pdf)
In _Advances in Neural Information Processing Systems_.


---

Inputs `\( \mathbf{X} = (x_n)_{n=1}^N \)`, where `\(x_n \in \mathbb{R}^d\)`

Outputs `\(\mathbf{y} = (y_n)_{n=1}^N\)`, where `\(y_n = \pm 1\)`

Model parameters `\(\mathbf{\theta} \in \mathbb{R}^d\)`

Logistic regression model:
`\(
  p(\mathbf{y} | \mathbf{X}, \mathbf{\theta}) =
  \prod_{n=1}^N p(y_n | x_n, \theta) =
  \prod_{n=1}^N \text{logistic}(y_n x_n \cdot \mathbf{\theta}),
\)`


.cols[
  .fifty[
    where `\(\text{logistic}(s) = \frac{1}{1 + e^{-s}}\)`
  ]

  .fifty[
    <img src="logistic.png" width="50%" />
  ]
]

Bayes rule (hard to compute):
`\(
  p(\theta | \mathbf{X}, \mathbf{y}) =
  \frac{p(\mathbf{y} | \mathbf{X}, \mathbf{\theta}) \text{prior}(\theta)}{
    p(\mathbf{y} |  \mathbf{X})
  }
\)`

Take random samples instead:
Standard algs (e.g. PyMC3)
take `\( \log p(\mathbf{y}|\mathbf{X}, \cdot), \text{prior}(\cdot)\)` as
inputs,
call them for many values of `\(\theta\)`,
return samples from `\(p(\theta | \mathbf{X}, \mathbf{y})\)`


---

Again, sampling algorithm for `\(p(\theta | \mathbf{X}, \mathbf{y})\)`
takes `\(\log p(\mathbf{y}|\mathbf{X}, \cdot), \text{prior}(\cdot)\)`,
calls them for many values of `\(\theta\)`

But
`\(
  \log p(\mathbf{y} | \mathbf{X}, \mathbf{\theta}) =
  \sum_{n=1}^N \log \text{logistic}(y_n x_n \cdot \mathbf{\theta}),
\)`
takes `\(O(N)\)` steps.
Maybe `\(N\)` is really big.

<br />

What if we could find a way to factor like this:
<!-- actually a dot product -->
`\(
  \log p(\mathbf{y} | \mathbf{X}, \mathbf{\theta}) =
  \sum_{n=1}^N f(\theta) \cdot g(x_n, y_n) =
  f(\theta) \cdot \sum_{n=1}^N g(x_n, y_n)
\)`

So compute `\(\sum_{n=1}^N g(x_n, y_n)\)` once then
`\(\log p(\mathbf{y} | \mathbf{X}, \cdot) \)` takes
`\(O(1)\)` steps

<br />

Well,
`\(\log \text{logistic}(y_n x_n \cdot \mathbf{\theta})\)`
doesn't factor, but if we replace
`\(\log \text{logistic} (\cdot)\)`
with a polynomial (e.g. Taylor series) that does!

More polynomial terms `\(\rightarrow\)` better approximation

---

## Implementation

Again,
`\(
  \log p(\mathbf{y} | \mathbf{X}, \mathbf{\theta}) =
  \sum_{n=1}^N \log \text{logistic}(y_n x_n \cdot \mathbf{\theta})
  \approx
  \sum_{n=1}^N \text{poly}(y_n x_n \cdot \mathbf{\theta}) \\ =
  f(\theta) \cdot \sum_{n=1}^N g(x_n, y_n)
\)`

<br />


1. Compute polynomial expansion using formula, from which we get `\(f\)` and
`\(g\)`

2. Compute `\(c = \sum_{n=1}^N g(x_n, y_n)\)` using big data framework of
choice. I used PySpark, paper authors used Ray.

3. Using the above, define Theano Op to compute
`\(\theta \mapsto
f(\theta) \cdot c \approx \log p(\mathbf{y} | \mathbf{X},
\theta) \)`,
pass to PyMC3 as a custom likelihood function

4. PyMC3 gives samples from
`\( \approx p(\theta | \mathbf{X}, \mathbf{y})\)`

---

demo

<https://github.com/amacfie/pass_logit/blob/master/demo.ipynb>







    </textarea>
    <script src="http://gnab.github.io/remark/downloads/remark-latest.min.js" type="text/javascript"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS_HTML&delayStartupUntil=configured"
      type="text/javascript"></script>
    <script type="text/javascript">
      var slideshow = remark.create({
        navigation: {
          click: true
        },
        slideNumberFormat: '%current%',
      });

      // Setup MathJax
      MathJax.Hub.Config({
          tex2jax: {
          skipTags: ['script', 'noscript', 'style', 'textarea', 'pre']
          }
      });

      MathJax.Hub.Configured();
    </script>
  </body>
</html>

